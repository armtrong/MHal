//!
//! @file				Gpio.h
//! @author				Geoffrey Hunter <gbmhunter@gmail.com> (www.mbedded.ninja)
//! @created			2014-08-18
//! @last-modified		2014-09-15
//! @brief 				Hardware abstraction layer (HAL) for a GPIO pin.
//! @details
//!

#ifndef __cplusplus
	#error Please build with C++ compiler
#endif

//===============================================================================================//
//======================================== HEADER GUARD =========================================//
//===============================================================================================//

#ifndef MHAL_GPIO_H
#define MHAL_GPIO_H

//===============================================================================================//
//==================================== FORWARD DECLARATION ======================================//
//===============================================================================================//

namespace MbeddedNinja
{
	namespace MHalNs
	{
		class Gpio;
	}
}

//===============================================================================================//
//========================================== INCLUDES ===========================================//
//===============================================================================================//

// System headers
#include <cstdint>		// int8_t, int32_t e.t.c

// User libraries
// none

// User headers
// none

//===============================================================================================//
//======================================== NAMESPACE ============================================//
//===============================================================================================//

namespace MbeddedNinja
{

	namespace MHalNs
	{
		
		//! @brief		Hardware abstraction layer (HAL) for a GPIO pin.
		//! @details	This class is abstract.
		class Gpio
		{
			
			public:

				//======================================================================================//
				//==================================== PUBLIC METHODS ==================================//
				//======================================================================================//
			
				//! @brief		Virtual destructor.
				virtual ~Gpio(){}

				//! @brief		Sets the GPIO low or high.
				virtual void Write(bool lowHigh) = 0;

				//! @brief		Reads the value of the pin.
				virtual bool Read() = 0;

				//======================================================================================//
				//================================= PUBLIC VARIABLES ===================================//
				//======================================================================================//

				// none

			private:

				//======================================================================================//
				//=================================== PRIVATE METHODS ==================================//
				//======================================================================================//

				// none

				//======================================================================================//
				//================================== PRIVATE VARIABLES =================================//
				//======================================================================================//

				// PSOC API
				//uint8_t (* readPin)();
				//void (* writePin)(uint8_t lowHigh);

			protected:

				//======================================================================================//
				//=================================== PROTECTED METHODS ================================//
				//======================================================================================//
				
				Gpio(){};
				
				//======================================================================================//
				//================================== PROTECTED VARIABLES ===============================//
				//======================================================================================//

				// none
			
		}; // class Gpio

	} // namespace MHalNs
} // namespace MbeddedNinja

#endif	// #ifndef MHAL_GPIO_H

// EOF
