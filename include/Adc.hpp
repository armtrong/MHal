//!
//! @file				Adc.hpp
//! @author				Geoffrey Hunter <gbmhunter@gmail.com> (www.mbedded.ninja)
//! @created			2014-09-15
//! @last-modified		2014-09-15
//! @brief 				Hardware abstraction layer for a ADC.
//! @details
//!						

#ifndef __cplusplus
	#error Please build with C++ compiler
#endif

//===============================================================================================//
//======================================== HEADER GUARD =========================================//
//===============================================================================================//

#ifndef MHAL_ADC_H
#define MHAL_ADC_H

//===============================================================================================//
//==================================== FORWARD DECLARATION ======================================//
//===============================================================================================//

namespace MbeddedNinja
{
	namespace MHalNs
	{
		class Adc;
	}
}

//===============================================================================================//
//========================================== INCLUDES ===========================================//
//===============================================================================================//

//===== SYSTEM LIBRARIES =====//
#include <cstdint>		// int8_t, int32_t e.t.c

//===== USER LIBRARIES =====//
// none

//===== USER SOURCE =====//
// none

namespace MbeddedNinja
{

	namespace MHalNs
	{
		
		//! @brief		Hardware abstraction layer for a ADC.
		//! @details	Abstract class.
		class Adc
		{
			
			public:

				//! @brief		Enumerates the supported ADC "run modes".
				enum class AdcMode
				{
					//! Software triggered ADC conversion, with interrupt called
					//! on completion.
					SOFTWARE_TRIGGER_INT_ON_COMPLETION
				};

				//======================================================================================//
				//==================================== PUBLIC METHODS ==================================//
				//======================================================================================//
			
				//! @brief		Virtual destructor.
				virtual ~Adc(){}

				//! @brief		Starts the ADC.
				virtual bool Start() = 0;

				//! @brief		Stops the ADC.
				virtual bool Stop() = 0;

				//! @brief		Starts an ADC measurement, blocks until ADC measurement
				//!				is complete, and and returns the voltage (in volts)
				virtual float MeasureVoltage() = 0;

				//======================================================================================//
				//================================= PUBLIC VARIABLES ===================================//
				//======================================================================================//

				// none

			private:

				//======================================================================================//
				//=================================== PRIVATE METHODS ==================================//
				//======================================================================================//

				// none

				//======================================================================================//
				//================================== PRIVATE VARIABLES =================================//
				//======================================================================================//

				// PSOC API
				//uint8_t (* readPin)();
				//void (* writePin)(uint8_t lowHigh);

			protected:

				//======================================================================================//
				//=================================== PROTECTED METHODS ================================//
				//======================================================================================//
				
				Adc(AdcMode adcMode) :
					adcMode(adcMode)
				{};
				
				//======================================================================================//
				//================================== PROTECTED VARIABLES ===============================//
				//======================================================================================//

				AdcMode adcMode;
			
		}; // class Adc

	} // namespace MHalNs
} // namespace MbedddedNinja


#endif	// #ifndef MHAL_ADC_H

// EOF
